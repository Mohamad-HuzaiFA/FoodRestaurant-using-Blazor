@page "/details/{id:int}"
@rendermode InteractiveServer

@inject NavigationManager Navigation

@inject ICartService cartService
@inject IProductService productService

@if (id != null)
{
    var product = Products.FirstOrDefault(p => p.Id == id);
    if (product != null)
    {
        <div class="container-fluid m-2 bg-light">
            <div class="row">
                <div class="col-md-4">
                    <img src="@product.ImgUrl" alt="Product Image" style="width: 100%; height: 350px; object-fit: cover; border-radius: 5px;">
                </div>
                <div class="col-md-4 d-flex flex-column justify-content-center">
                    <div class="text-black">
                        <h3 class="mb-3">@product.Name</h3>
                        <p>This is a brief description of the product, highlighting its features and benefits.</p>
                        <p class="text-muted mt-2">Price: <strong>Rs. @product.Price</strong></p>
                    </div>
                </div>
                <div class="col-md-4 d-flex flex-column justify-content-center">
                    <button class="btn btn-success btn-lg mb-3 w-100" @onclick="(() => AddToCart(product))">Add to Cart</button>
                    <button class="btn btn-primary btn-lg w-100">Buy Now</button>
                    @* <button class="btn btn-primary btn-lg w-100" @onclick="(() => BuyNow(product))">Buy Now</button> *@

                </div>
            </div>
        </div>
    }
    else
    {
        <p>Product not found.</p>
    }
}

@code {

    [Parameter]
    public int? id { get; set; }

    private List<Product> Products = new List<Product>();

    protected override async Task OnInitializedAsync()
    {
        Products = await productService.GetProducts();
    }

    private void AddToCart(Product product)
    {
        cartService.AddProduct(product);
        StateHasChanged();

    }

}



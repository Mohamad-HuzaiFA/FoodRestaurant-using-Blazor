@page "/adminEdit"

@rendermode InteractiveServer

@inject IProductService productService

<div class="admin-panel-container">
    <h3 class="admin-panel-title">
        Admin Panel - Manage Products
    </h3>
</div>

<style>
    /* Background image with full coverage */
    .admin-panel-container {
        background-image: url('Assets/adminn.jpg');
        background-size: cover; /* Ensures the image covers the container completely */
        background-position: center center; /* Keeps the image centered */
        background-repeat: no-repeat;
        padding: 100px 20px;
        border-radius: 15px;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        position: relative;
    }

    /* Title styling */
    .admin-panel-title {
        color: yellow;
        font-size: 36px;
        text-transform: uppercase;
        font-weight: bold;
        letter-spacing: 2px;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
        margin: 0;
        position: relative;
        z-index: 1;
    }

    /* Optional: Add a slight gradient overlay */
    .admin-panel-container:before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.4); /* Adds dark overlay for contrast */
        border-radius: 15px;
        z-index: 0;
    }
</style>





@if (products != null && products.Any())
{
    <div class="container mt-4">
        <div class="row">
            @foreach (var product in products)
            {
                <div class="col-12 mb-2">
                    <div class="card">
                        <div class="row g-0">
                            <div class="col-md-2">
                                <img src="@product.ImgUrl" class="img-fluid rounded-start" style="height: 100px; object-fit: cover;" alt="@product.Name">
                            </div>
                            <div class="col-md-6 d-flex align-items-center">
                                <div class="card-body">
                                    <h5 class="card-title">@product.Name</h5>
                                    <p class="card-text">Price: Rs. @product.Price</p>
                                </div>
                            </div>
                            <div class="col-md-4 d-flex align-items-center justify-content-center">
                                <button class="btn btn-primary me-2" @onclick="() => EditProduct(product)">Edit</button>
                                <button class="btn btn-danger" @onclick="() => DeleteProduct(product.Id)">Delete</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    @if (isEditing)
    {
        <div class="modal d-block" style="background-color: rgba(0,0,0,0.5);">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title text-black">Edit Product</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="productName" class="form-label text-black">Product Name</label>
                            <input type="text" id="productName" class="form-control" @bind="selectedProduct.Name">
                        </div>
                        <div class="mb-3">
                            <label for="productPrice" class="form-label text-black">Price</label>
                            <input type="number" id="productPrice" class="form-control" @bind="selectedProduct.Price">
                        </div>
                        <div class="mb-3">
                            <label for="productImage" class="form-label text-black">Image URL</label>
                            <input type="text" id="productImage" class="form-control" @bind="selectedProduct.ImgUrl">
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">Cancel</button>
                        <button type="button" class="btn btn-success" @onclick="SaveProduct">Save Changes</button>
                    </div>
                </div>
            </div>
        </div>
    }
}
else
{
    <div class="d-flex align-items-center justify-content-center col-lg-12">
        <p>No products found.</p>
    </div>
}

@code {
    private bool isEditing = false;
    private Product selectedProduct = new Product();

    private List<Product> products;

    protected override async Task OnInitializedAsync()
    {
        productService.OnChange += StateHasChanged;
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        products = await productService.GetProducts();
    }

    
    private void EditProduct(Product product)
    {
        selectedProduct = product;
        isEditing = true;
    }

    private async Task SaveProduct()
    {
        bool isUpdated = await productService.UpdateProductAsync(selectedProduct);
        if (isUpdated)
        {
            isEditing = false;
            await LoadProducts();
        }
    }

    private async Task DeleteProduct(int id)
    {
        bool isDeleted = await productService.DeleteProductAsync(id);
        if (isDeleted)
        {
            await LoadProducts();
        }
    }

    private void CloseModal()
    {
        isEditing = false;
        selectedProduct = new Product();
    }

    public void Dispose()
    {
        productService.OnChange -= StateHasChanged;
    }

}
